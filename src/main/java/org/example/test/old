package org.example.test;

import org.example.object.*;
import org.example.object.Object;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import static org.example.test.OpCodes.*;

public class VM {
    Stack<Object> excecutionStack;
    StackController stackController ;
    //private final Stack<Map<String, Object>> scopes = new Stack<>();
    int ip=0;

    private List<Object> globals = new ArrayList<>();
    private Stack<Frame> callStack = new Stack<>();

    private static class Frame {
        int returnAddress;
        List<Object> locals;
    }

    public VM( StackController stackController) {
        this.excecutionStack = new Stack<>();
        this.stackController = stackController;
    }

    public void run() {

        ip = 0;
        boolean done = true;
        while (done && ip < stackController.getCode().length) { // Add bounds check
            //System.out.println("ip=" + ip + ", opcode=" + fromByte(stackController.readCode(ip)) + ", stack=" + excecutionStack);
            OpCodes result = fromByte(stackController.readCode(ip));
            switch (result) {
                case CONSTANT -> {
                    handelConstant();
                }
                case GET_LOCAL -> {
                    int localIndex = Byte.toUnsignedInt(stackController.readCode(ip + 1));
                    Frame currentFrame = callStack.peek();
                    excecutionStack.push(currentFrame.locals.get(localIndex));
                    ip += 2;
                }
                case SET_LOCAL -> {
                    int localIndex = Byte.toUnsignedInt(stackController.readCode(ip + 1));
                    Object value = excecutionStack.pop();
                    Frame currentFrame = callStack.peek();
                    // Ensure locals list is large enough
                    while (currentFrame.locals.size() <= localIndex) {
                        currentFrame.locals.add(null);
                    }
                    currentFrame.locals.set(localIndex, value);
                    ip += 2;
                }

                case ADD, MINUS, MULTIPLY, DIVIDE, LOWER, LOWER_EQUAL, EQUAL, NOT_EQUAL, GREATER, GREATER_EQUAL -> {
                    handelOperation(result);
                    ip++;
                }
                case AND, OR -> {
                    handelLogicalOperation(result);
                    ip++;
                }
                case SET_GLOBAL_VALUE -> {
                    handelSetGlobalValue();
                    ip += 2;
                }
                case GET_GLOBAL_VALUE -> {
                    handleGetGlobal();
                    ip += 2;
                }
                case JUMP_IF_FALSE -> {
                    byte offsetByte = stackController.readCode(ip + 1);
                    int offset = (int) offsetByte; // Signed offset
                    Object condition = excecutionStack.pop(); // Always pop
                    if (!isTruthy(condition)) {
                        ip += 2 + offset;
                    } else {
                        ip += 2;
                    }
                }
                case JUMP -> {
                    byte offsetByte = stackController.readCode(ip + 1);
                    int offset = (int) offsetByte; // Signed offset
                    ip += 2 + offset;
                }
                case LOOP -> {
                    byte offsetByte = stackController.readCode(ip + 1);
                    int offset = (int) offsetByte; // Signed offset
                    ip += 2 + offset; // Use JUMP-like behavior
                }
                case POP_SCOPE -> {
                    ip++;
                }
                case NEGATE -> {
                    Object value = excecutionStack.pop();
                    if (value instanceof IntegerObject i) {
                        excecutionStack.push(new IntegerObject(-i.getValue()));
                    }
                    ip++;
                }
                case CALL -> {
                    int argCount = stackController.readCode(ip + 1);
                    ip += 2;
                    handleCall(argCount);
                }
                case RETURN -> {
                    Frame frame = callStack.pop();
                    ip = frame.returnAddress;
                }
                case BANG -> {
                    Object value = excecutionStack.pop();
                    excecutionStack.push(new BooleanObject(!isTruthy(value)));
                    ip++;
                }
                case LOOP_START -> {
                    ip++;
                }
                case LOOP_END -> {
                    ip++;
                }
                case EOF -> {
                    done = false;
                }
                default -> ip++;
            }
        }
    }

    private boolean isTruthy(Object value) {
        if (value instanceof BooleanObject b) return b.getValue();
        if (value instanceof IntegerObject i) return i.getValue() != 0;
        if (value instanceof StringObject s) return !s.getValue().isEmpty();
        return true; // Default truthy
    }
    private void handelOperation(OpCodes result) {
        if (excecutionStack.size() < 2) {
            throw new RuntimeException("Stack underflow for operation " + result + " at ip=" + ip + ", stack=" + excecutionStack);
        }
        Object rightObject = excecutionStack.pop();
        Object leftObject = excecutionStack.pop();
        if (rightObject instanceof IntegerObject right && leftObject instanceof IntegerObject left) {
            switch (result) {
                case ADD -> {
                    excecutionStack.push(new IntegerObject(left.getValue() + right.getValue()));
                }
                case MINUS -> {
                    excecutionStack.push(new IntegerObject(left.getValue() - right.getValue()));
                }
                case MULTIPLY -> {
                    excecutionStack.push(new IntegerObject(left.getValue() * right.getValue()));
                }
                case DIVIDE -> {
                    excecutionStack.push(new IntegerObject(left.getValue() / right.getValue()));
                }
                case NOT_EQUAL -> {
                    excecutionStack.push(new BooleanObject(left.getValue() != right.getValue()));
                }
                case LOWER -> {
                    excecutionStack.push(new BooleanObject(left.getValue() < right.getValue()));
                }
                case GREATER -> {
                    excecutionStack.push(new BooleanObject(left.getValue() > right.getValue()));
                }
                case EQUAL -> {
                    excecutionStack.push(new BooleanObject(left.getValue() == right.getValue()));
                }
                case LOWER_EQUAL -> {
                    excecutionStack.push(new BooleanObject(left.getValue() <= right.getValue()));
                }
                case GREATER_EQUAL -> {
                    excecutionStack.push(new BooleanObject(left.getValue() >= right.getValue()));
                }
            }
        }else if (rightObject instanceof StringObject right && leftObject instanceof StringObject left){
            switch (result) {
                case ADD -> {
                    excecutionStack.push(new StringObject(left.getValue() + right.getValue()));
                }
                case NOT_EQUAL -> {
                    excecutionStack.push(new BooleanObject(!left.getValue().equals(right.getValue())));
                }
                case LOWER -> {
                    excecutionStack.push(new BooleanObject(left.getValue().length() < right.getValue().length()));
                }
                case GREATER -> {
                    excecutionStack.push(new BooleanObject(left.getValue().length() > right.getValue().length()));
                }
                case EQUAL -> {
                    excecutionStack.push(new BooleanObject(left.getValue().equals( right.getValue())));
                }
                case LOWER_EQUAL -> {
                    excecutionStack.push(new BooleanObject(left.getValue().length() <= right.getValue().length()));
                }
                case GREATER_EQUAL -> {
                    excecutionStack.push(new BooleanObject(left.getValue().length() >= right.getValue().length()));
                }
                default -> throw new RuntimeException("cant do operation "+result+" on strings");
            }
        }
        else if (rightObject instanceof BooleanObject right && leftObject instanceof BooleanObject left){
            short boolr = (short) (right.getValue()?1:0);
            short booll = (short) (left.getValue()?1:0);
            switch (result) {
                case ADD,OR -> {
                    excecutionStack.push(new BooleanObject(left.getValue() || right.getValue()));
                }
                case MULTIPLY,AND -> {
                    excecutionStack.push(new BooleanObject(left.getValue() && right.getValue()));
                }
                case NOT_EQUAL -> {
                    excecutionStack.push(new BooleanObject(left.getValue() != right.getValue()));
                }
                case LOWER -> {
                    excecutionStack.push(new BooleanObject(booll < boolr));
                }
                case GREATER -> {
                    excecutionStack.push(new BooleanObject(booll >  boolr));
                }
                case EQUAL -> {
                    excecutionStack.push(new BooleanObject(left.getValue() == right.getValue()));
                }
                case LOWER_EQUAL -> {
                    excecutionStack.push(new BooleanObject(booll <= boolr));
                }
                case GREATER_EQUAL -> {
                    excecutionStack.push(new BooleanObject(booll >= boolr));
                }
                default -> throw new RuntimeException("cant do operation "+result+" on booleans");
            }
        }
    }



    private void handelLogicalOperation(OpCodes result) {
        Object rightObject = excecutionStack.pop();
        Object leftObject = excecutionStack.pop();
        if (rightObject instanceof BooleanObject right && leftObject instanceof BooleanObject left) {
            switch (result) {
                case AND -> {
                    excecutionStack.push(new BooleanObject(left.getValue() && right.getValue()));
                }
                case OR -> {
                    excecutionStack.push(new BooleanObject(left.getValue() || right.getValue()));
                }
            }
        }
    }
    private void handelConstant() {
        int idx =stackController.getCode()[ip+1];
        excecutionStack.push( stackController.getConstants().get(idx));
        ip+=2;
    }

    private void handelSetGlobalValue() {
        if (excecutionStack.isEmpty()) {
            throw new RuntimeException("Stack underflow for SET_GLOBAL_VALUE at ip=" + ip + ", stack=" + excecutionStack);
        }
        int index = Byte.toUnsignedInt(stackController.readCode(ip + 1));
        Object value = excecutionStack.pop();
        // Ensure the globals list is large enough
        while (globals.size() <= index) {
            globals.add(null);
        }
        globals.set(index, value);
        System.out.println("set result"+index +"   "+value);
    }

    private void handleGetGlobal() {
        int index = Byte.toUnsignedInt(stackController.readCode(ip + 1));
        if (index >= globals.size() || globals.get(index) == null) {
            throw new RuntimeException("Undefined global variable at index " + index);
        }
        excecutionStack.push(globals.get(index));
        System.out.println("get result"+index +"   "+globals.get(index));
    }

    /*private void handleCall(int argCount) {
        if (excecutionStack.size() < argCount) {
            throw new RuntimeException("Stack underflow for CALL at ip=" + ip + ", stack=" + excecutionStack);
        }
        // Pop arguments
        List<Object> args = new ArrayList<>();
        for (int i = 0; i < argCount; i++) {
            args.add(0, excecutionStack.pop()); // Add to front to reverse order
        }
        // Pop function
        if (excecutionStack.isEmpty()) {
            throw new RuntimeException("Stack underflow for CALL at ip=" + ip + ", stack=" + excecutionStack);
        }
        Object fnObj = excecutionStack.pop();
        if (!(fnObj instanceof FunctionObjectCode fn)) {
            throw new RuntimeException("Not a function: " + fnObj.getClass());
        }
        Frame frame = new Frame();
        frame.returnAddress = ip;
        frame.locals = new ArrayList<>(args);
        callStack.push(frame);
        // Backup current state
        StackController originalController = stackController;
        int originalIP = ip;
        List<Object> originalGlobals = globals;

        // Switch to function's bytecode
        stackController = new StackController();
        stackController.setCode(fn.getCode());
        globals = new ArrayList<>(fn.getConstants());
        ip = 0;

        // Run function code
        //runFunction();
        run();
        // Restore state
        stackController = originalController;
        ip = originalIP;
        globals = originalGlobals;
    }*/
    private void handleCall(int argCount) {
        List<Object> args = new ArrayList<>();
        for (int i = 0; i < argCount; i++) {
            args.add(0, excecutionStack.pop()); // Reverse argument order
        }

        Object fnObj = excecutionStack.pop();
        if (!(fnObj instanceof FunctionObjectCode fn)) {
            throw new RuntimeException("Not a function");
        }

        // Preserve current state
        StackController originalController = stackController;
        List<Object> originalGlobals = globals;

        // Use function's code and constants
        stackController = new StackController();
        stackController.setCode(fn.getCode());
        stackController.setConstants(fn.getConstants());
        globals = originalGlobals;

        // Setup call frame
        Frame frame = new Frame();
        frame.returnAddress = ip;
        frame.locals = new ArrayList<>(args);
        callStack.push(frame); // Push frame

        ip = 0;
        run(); // Execute function (will pop frame on RETURN)

        // Restore state (NO callStack.pop() here)
        stackController = originalController;
        globals = originalGlobals;
    }

    private void runFunction() {
        while (ip < stackController.getCode().length) {
            OpCodes op = OpCodes.fromByte(stackController.readCode(ip));
            switch (op) {
                case RETURN -> { return; }
                // Handle other opcodes like in main run()
            }
        }
    }
    public void printResults(){
        while (!excecutionStack.isEmpty()){
            System.out.println(excecutionStack.pop());
        }
    }

    public void printResult(String x, SymbolTable symbolTable) {
        SymbolTable.Symbol symbol=symbolTable.resolve(x);

        System.out.println(x +" =    "+globals.get(symbol.index()));
    }
}
